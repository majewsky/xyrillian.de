<?xml version="1.0"?>
<rss version="2.0"><channel>
  <title>Xyrillian Thoughts</title>
  <link>https://xyrillian.de/thoughts/</link>
  <description>Personal blog of Stefan Majewsky</description>
  <language>en</language>
  <lastBuildDate>Sun, 18 Sep 2022 20:35:44 +0000</lastBuildDate>
  <item>
    <title>My standard service architecture</title>
    <description>&lt;h1&gt;My standard service architecture&lt;/h1&gt;
&lt;p&gt;I have been working in the IT industry for over 10 years, first in a pure developer position, then ever so slowly
transitioning into an architect role. Over this time, experience with all the systems I have worked on has compounded
into a recurring design template that I apply to most of my services. In this post, I will describe this architecture,
working my way up from data model to component model to runtime environment, and provide justification for the principal
design decisions. Finally, I will acknowledge and discuss some limitations of this design.&lt;/p&gt;
&lt;p&gt;The design presented here is mostly agnostic towards:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;which programming language is used&lt;/em&gt;: My services are implemented in &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt;, but the architecture should also
be applicable to most other languages. (As a caveat, if you are using an opinionated framework like Ruby on Rails, it
is usually a bad idea to go against your framework’s opinions.)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;the &lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices&quot;&gt;microservice&lt;/a&gt;/&lt;a href=&quot;https://en.wikipedia.org/wiki/Monolithic_system&quot;&gt;monolith&lt;/a&gt; distinction&lt;/em&gt;: Most of my services happen to be
microservices because of how &lt;a href=&quot;https://github.com/sapcc&quot;&gt;my team&lt;/a&gt;’s general stack looks like. But you can also build a monolith from this
template. In fact, some of its characteristics are influenced by a monolith that I helped maintain for some years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/my-standard-service-architecture.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/my-standard-service-architecture.html</link>
    <guid>https://xyrillian.de/id/thoughts/my-standard-service-architecture</guid>
    <pubDate>Sun, 18 Sep 2022 18:46:49 +0000</pubDate>
  </item>
  <item>
    <title>Notes on API design in Go</title>
    <description>&lt;h1&gt;Notes on API design in Go&lt;/h1&gt;
&lt;p&gt;At work, I have a working student who’s implementing some features in the various Golang applications that I build and maintain. I’m trying to pass some of my experience with real-world programming on to him, and &lt;a href=&quot;https://github.com/sapcc/go-bits/pull/2&quot;&gt;one particular pull request review&lt;/a&gt; escalated into a blog post on API design, so I might as well share it here for archival purposes (and to fill the desolate wasteland that is my RSS feed).&lt;/p&gt;
&lt;p&gt;The concern of the pull request was to add a function to a utility library that implements exponential backoff. His proposed API looked like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;//Retry takes a function (action) that returns an error, and two int64 values (x, y) as
//parameters and creates a retry loop with an exponential backoff such that on failure (error return),
//the action is called again after x seconds and this is incremented by a factor of 2 until y minutes
//then it is keeps on repeating after y minutes till action succeeds (no error).
func Retry(action func() error, x, y time.Duration) { ...  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/golang-api-design.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/golang-api-design.html</link>
    <guid>https://xyrillian.de/id/thoughts/golang-api-design</guid>
    <pubDate>Thu, 09 Aug 2018 11:14:32 +0000</pubDate>
  </item>
  <item>
    <title>GDPR ahoy!</title>
    <description>&lt;h1&gt;GDPR ahoy!&lt;/h1&gt;
&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&quot;&gt;General Data Protection Regulation&lt;/a&gt; comes into full force today. I
took the opportunity to add a data privacy statement to the blog. Here is it
in its full glory:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No system under my control records any personal data of users of this website.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is true because I disabled the nginx access log a long time ago, and
because I restricted the nginx error log to not report 404 errors. So the logs
are basically empty now (except for alert messages from nginx). &lt;a href=&quot;https://github.com/majewsky/system-configuration/blob/da7f81133dee981f771dafd3c066ad28e7a09a8f/hologram-nginx.pkg.toml#L102-L103&quot;&gt;These are the
relevant lines in my nginx config.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No idea why any blogger would be panicking about GDPR.&lt;/p&gt;
&lt;p&gt;Side-note: Even though I choose not to wiretap my users’ browsers, &lt;a href=&quot;https://blog.bethselamin.de/posts/latency-matters-aftermath.html&quot;&gt;I still
have analytics&lt;/a&gt;.&lt;/p&gt;
</description>
    <link>https://xyrillian.de/thoughts/posts/gdpr-ahoy.html</link>
    <guid>https://xyrillian.de/id/thoughts/gdpr-ahoy</guid>
    <pubDate>Fri, 25 May 2018 00:51:46 +0000</pubDate>
  </item>
  <item>
    <title>Does the HN crowd show up in monitoring?</title>
    <description>&lt;h1&gt;Does the HN crowd show up in monitoring?&lt;/h1&gt;
&lt;p&gt;So &lt;a href=&quot;latency-matters.html&quot;&gt;my previous post&lt;/a&gt; made &lt;a href=&quot;https://news.ycombinator.com/item?id=15059795&quot;&gt;the frontpage on Hacker News&lt;/a&gt;.
Awesome! I have seen many websites collapse under the load of a HN crowd, so this is the perfect time to look at the monitoring.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/thoughts/img/munin1.png&quot; alt=&quot;Munin charts&quot;&gt;&lt;/p&gt;
&lt;p&gt;1 megabit per second? That’s lower than I anticipated, even with all the size optimizations that I implemented (or let’s
just say, all the bloat that I purposefully did not add). Same goes for CPU usage: I’ve heard so many people on the
internet complain about how expensive TLS handshakes are, yet my virtual server handles all of this with less than six
percent of a single core. It’s barely even visible on the CPU usage chart, and completely drowned out by noise on the
load chart.&lt;/p&gt;
</description>
    <link>https://xyrillian.de/thoughts/posts/latency-matters-aftermath.html</link>
    <guid>https://xyrillian.de/id/thoughts/latency-matters-aftermath</guid>
    <pubDate>Sun, 20 Aug 2017 22:05:41 +0000</pubDate>
  </item>
  <item>
    <title>Latency matters</title>
    <description>&lt;h1&gt;Latency matters&lt;/h1&gt;
&lt;p&gt;A month ago, danluu wrote about &lt;a href=&quot;https://danluu.com/term-latency/&quot;&gt;terminal and shell performance&lt;/a&gt;. In that post, he
measured the latency between a key being pressed and the corresponding character appearing in the terminal. Across
terminals, median latencies ranged between 5 and 45 milliseconds, with the 99.9th percentile going as high as 110 ms for
some terminals. Now I can see that more than 100 milliseconds is going to be noticeable, but I was certainly left
wondering: Can I really perceive a difference between 5 ms latency and 45 ms latency?&lt;/p&gt;
&lt;p&gt;Turns out that I can.&lt;/p&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/latency-matters.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/latency-matters.html</link>
    <guid>https://xyrillian.de/id/thoughts/latency-matters</guid>
    <pubDate>Sun, 20 Aug 2017 19:02:45 +0000</pubDate>
  </item>
  <item>
    <title>How I run Certbot (as non-root and automated)</title>
    <description>&lt;h1&gt;How I run Certbot (as non-root and automated)&lt;/h1&gt;
&lt;p&gt;I have previously noted that I get all my TLS certificates from &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt;, but since my usage of the client
deviates quite a bit from the standard, I figured I should take a few minutes to describe my setup.&lt;/p&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/how-i-run-certbot.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/how-i-run-certbot.html</link>
    <guid>https://xyrillian.de/id/thoughts/how-i-run-certbot</guid>
    <pubDate>Fri, 24 Feb 2017 16:49:59 +0000</pubDate>
  </item>
  <item>
    <title>Donation to Let’s Encrypt</title>
    <description>&lt;h1&gt;Donation to Let’s Encrypt&lt;/h1&gt;
&lt;p&gt;When you visit this blog, the connection will be encrypted and thus
tamper-proof thanks to a free TLS certificate from
&lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt;. They’re currently running a &lt;a href=&quot;https://letsencrypt.org/donate/&quot;&gt;crowdfunding campaign&lt;/a&gt; to
fund their operational costs. Since I use their service extensively, I gave 50
dollars. If you, too, like the idea of a more secure and privacy-respecting
web, please consider giving generously, too.&lt;/p&gt;
</description>
    <link>https://xyrillian.de/thoughts/posts/donation-letsencrypt.html</link>
    <guid>https://xyrillian.de/id/thoughts/donation-letsencrypt</guid>
    <pubDate>Wed, 23 Nov 2016 09:02:28 +0000</pubDate>
  </item>
  <item>
    <title>Argh-P-M! – Dissecting the RPM file format</title>
    <description>&lt;h1&gt;Argh-P-M! – Dissecting the RPM file format&lt;/h1&gt;
&lt;p&gt;As the first actual content on my new blog, let me tell you the story of how I went absolutely crazy.&lt;/p&gt;
&lt;p&gt;On my private systems, I ship configuration as system packages. Every distribution has their own tooling and process for
building these packages, but I eventually grew tired of the ceremony involved in it, and wrote &lt;a href=&quot;https://github.com/holocm/holo-build&quot;&gt;my own system package
compiler&lt;/a&gt;. Since I’m using Arch Linux everywhere, the first version generated only Pacman packages, but I
was determined to make it truly cross-distribution. The first step was support for Debian packages, which I implemented
in a mere two evenings (one for understanding the format, one for writing the generator).&lt;/p&gt;
&lt;p&gt;Next to dpkg, the other widely deployed package format is RPM, so I set out to add support for RPM as well. If I could
write the Debian generator in two days, then surely RPM support wouldn’t take that long, either. Little did I know that
I was embarking on a multi-month endeavor (including multiple week-long breaks to restore my sanity). To add insult to
injury, I stubbornly refused to add dependencies and use existing tooling (i.e., the &lt;code&gt;rpm-build(1)&lt;/code&gt; command). I wanted
to serialize the format directly from my own code, like I did for Pacman and Debian packages.&lt;/p&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/argh-pm.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/argh-pm.html</link>
    <guid>https://xyrillian.de/id/thoughts/argh-pm</guid>
    <pubDate>Mon, 24 Oct 2016 17:11:50 +0000</pubDate>
  </item>
  <item>
    <title>Blog Update: RSS</title>
    <description>&lt;h1&gt;Blog Update: RSS&lt;/h1&gt;
&lt;p&gt;While I was at it, I added an &lt;a href=&quot;https://blog.bethselamin.de/rss.xml&quot;&gt;RSS feed&lt;/a&gt;
and changed the timestamps on an article’s page to reflect the
&lt;a href=&quot;https://github.com/majewsky/blog-data&quot;&gt;git-log of the source file&lt;/a&gt;.&lt;/p&gt;
</description>
    <link>https://xyrillian.de/thoughts/posts/rss.html</link>
    <guid>https://xyrillian.de/id/thoughts/rss</guid>
    <pubDate>Sat, 22 Oct 2016 21:40:22 +0000</pubDate>
  </item>
  <item>
    <title>Hello World</title>
    <description>&lt;h1&gt;Hello World&lt;/h1&gt;
&lt;p&gt;I had known for a long time that I need a new blog. I had one years ago in the cloud
(&lt;a href=&quot;https://majewsky.wordpress.com&quot;&gt;it’s still live&lt;/a&gt;), but I definitely wanted something self-hosted this time. I had a
brief look at static website generators, and quickly decided that (as usual) I want a custom-tailored solution.&lt;/p&gt;
&lt;p&gt;The first iteration is an nginx serving static files rendered by a
&lt;a href=&quot;https://github.com/majewsky/blog-generator&quot;&gt;tiny Go program&lt;/a&gt;. Content comes from a
&lt;a href=&quot;https://github.com/majewsky/blog-data&quot;&gt;GitHub repo&lt;/a&gt; and is pulled every few minutes. Good enough for a first shot.
I might change the cronjob to be triggered by a GitHub webhook later on, but only if the delay until the next cronjob
run annoys me enough.&lt;/p&gt;
</description>
    <link>https://xyrillian.de/thoughts/posts/hello-world.html</link>
    <guid>https://xyrillian.de/id/thoughts/hello-world</guid>
    <pubDate>Sat, 22 Oct 2016 20:23:04 +0000</pubDate>
  </item>
</channel></rss>
