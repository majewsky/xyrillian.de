<?xml version="1.0"?>
<rss version="2.0"><channel>
  <title>Xyrillian Thoughts</title>
  <link>https://xyrillian.de/thoughts/</link>
  <description>Personal blog of Stefan Majewsky</description>
  <language>en</language>
  <lastBuildDate>Fri, 26 Jul 2024 08:50:58 +0000</lastBuildDate>
  <item>
    <title>Does the HN crowd show up in monitoring?</title>
    <description>&lt;h1&gt;Does the HN crowd show up in monitoring?&lt;/h1&gt;
&lt;p&gt;So &lt;a href=&quot;/thoughts/posts/latency-matters.html&quot;&gt;my previous post&lt;/a&gt; made &lt;a href=&quot;https://news.ycombinator.com/item?id=15059795&quot;&gt;the frontpage on Hacker News&lt;/a&gt;.
Awesome! I have seen many websites collapse under the load of a HN crowd, so this is the perfect time to look at the monitoring.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/thoughts/img/munin1.png&quot; alt=&quot;Munin charts&quot;&gt;&lt;/p&gt;
&lt;p&gt;1 megabit per second? That’s lower than I anticipated, even with all the size optimizations that I implemented (or let’s
just say, all the bloat that I purposefully did not add). Same goes for CPU usage: I’ve heard so many people on the
internet complain about how expensive TLS handshakes are, yet my virtual server handles all of this with less than six
percent of a single core. It’s barely even visible on the CPU usage chart, and completely drowned out by noise on the
load chart.&lt;/p&gt;
</description>
    <link>https://xyrillian.de/thoughts/posts/latency-matters-aftermath.html</link>
    <guid>https://xyrillian.de/id/thoughts/latency-matters-aftermath</guid>
    <pubDate>Sun, 20 Aug 2017 22:05:41 +0000</pubDate>
  </item>
  <item>
    <title>Latency matters</title>
    <description>&lt;h1&gt;Latency matters&lt;/h1&gt;
&lt;p&gt;A month ago, danluu wrote about &lt;a href=&quot;https://danluu.com/term-latency/&quot;&gt;terminal and shell performance&lt;/a&gt;. In that post, he
measured the latency between a key being pressed and the corresponding character appearing in the terminal. Across
terminals, median latencies ranged between 5 and 45 milliseconds, with the 99.9th percentile going as high as 110 ms for
some terminals. Now I can see that more than 100 milliseconds is going to be noticeable, but I was certainly left
wondering: Can I really perceive a difference between 5 ms latency and 45 ms latency?&lt;/p&gt;
&lt;p&gt;Turns out that I can.&lt;/p&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/latency-matters.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/latency-matters.html</link>
    <guid>https://xyrillian.de/id/thoughts/latency-matters</guid>
    <pubDate>Sun, 20 Aug 2017 19:02:45 +0000</pubDate>
  </item>
  <item>
    <title>How I run Certbot (as non-root and automated)</title>
    <description>&lt;h1&gt;How I run Certbot (as non-root and automated)&lt;/h1&gt;
&lt;p&gt;I have previously noted that I get all my TLS certificates from &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let’s Encrypt&lt;/a&gt;, but since my usage of the client
deviates quite a bit from the standard, I figured I should take a few minutes to describe my setup.&lt;/p&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/how-i-run-certbot.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/how-i-run-certbot.html</link>
    <guid>https://xyrillian.de/id/thoughts/how-i-run-certbot</guid>
    <pubDate>Fri, 24 Feb 2017 16:49:59 +0000</pubDate>
  </item>
  <item>
    <title>Argh-P-M! – Dissecting the RPM file format</title>
    <description>&lt;h1&gt;Argh-P-M! – Dissecting the RPM file format&lt;/h1&gt;
&lt;p&gt;As the first actual content on my new blog, let me tell you the story of how I went absolutely crazy.&lt;/p&gt;
&lt;p&gt;On my private systems, I ship configuration as system packages. Every distribution has their own tooling and process for
building these packages, but I eventually grew tired of the ceremony involved in it, and wrote &lt;a href=&quot;https://github.com/holocm/holo-build&quot;&gt;my own system package
compiler&lt;/a&gt;. Since I’m using Arch Linux everywhere, the first version generated only Pacman packages, but I
was determined to make it truly cross-distribution. The first step was support for Debian packages, which I implemented
in a mere two evenings (one for understanding the format, one for writing the generator).&lt;/p&gt;
&lt;p&gt;Next to dpkg, the other widely deployed package format is RPM, so I set out to add support for RPM as well. If I could
write the Debian generator in two days, then surely RPM support wouldn’t take that long, either. Little did I know that
I was embarking on a multi-month endeavor (including multiple week-long breaks to restore my sanity). To add insult to
injury, I stubbornly refused to add dependencies and use existing tooling (i.e., the &lt;code&gt;rpm-build(1)&lt;/code&gt; command). I wanted
to serialize the format directly from my own code, like I did for Pacman and Debian packages.&lt;/p&gt;
&lt;p class=&quot;more&quot;&gt;&lt;a href=&quot;/thoughts/posts/argh-pm.html&quot;&gt;Read more...&lt;/a&gt;&lt;/p&gt;</description>
    <link>https://xyrillian.de/thoughts/posts/argh-pm.html</link>
    <guid>https://xyrillian.de/id/thoughts/argh-pm</guid>
    <pubDate>Mon, 24 Oct 2016 17:11:50 +0000</pubDate>
  </item>
</channel></rss>
